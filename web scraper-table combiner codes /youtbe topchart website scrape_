{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1k_Ny94kxpHHIM8S7GWxNr73DRhxfniEP","authorship_tag":"ABX9TyN91vGHAV+5IQ/F5h27FZWe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","from datetime import datetime, timedelta\n","from lxml import html\n","import requests\n","import re\n","import json"],"metadata":{"id":"Czh8lOQDJBE2","executionInfo":{"status":"ok","timestamp":1707209670263,"user_tz":480,"elapsed":1201,"user":{"displayName":"Kevin Torres","userId":"02770742881997735716"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"id":"UYE9A07ZG4W4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707209672025,"user_tz":480,"elapsed":314,"user":{"displayName":"Kevin Torres","userId":"02770742881997735716"}},"outputId":"a2bc7b91-21c0-4ee9-d346-3ef15404894e"},"outputs":[{"output_type":"stream","name":"stdout","text":["20170928\n","20171005\n","20171012\n","20171019\n","20171026\n","20171102\n","20171109\n","20171116\n","20171123\n","20171130\n","20171207\n","20171214\n","20171221\n","20171228\n","20180104\n","20180111\n","20180118\n","20180125\n","20180201\n","20180208\n","20180215\n","20180222\n","20180301\n","20180308\n","20180315\n","20180322\n","20180329\n","20180405\n","20180412\n","20180419\n","20180426\n","20180503\n","20180510\n","20180517\n","20180524\n","20180531\n","20180607\n","20180614\n","20180621\n","20180628\n","20180705\n","20180712\n","20180719\n","20180726\n","20180802\n","20180809\n","20180816\n","20180823\n","20180830\n","20180906\n","20180913\n","20180920\n","20180927\n","20181004\n","20181011\n","20181018\n","20181025\n","20181101\n","20181108\n","20181115\n","20181122\n","20181129\n","20181206\n","20181213\n","20181220\n","20181227\n","20190103\n","20190110\n","20190117\n","20190124\n","20190131\n","20190207\n","20190214\n","20190221\n","20190228\n","20190307\n","20190314\n","20190321\n","20190328\n","20190404\n","20190411\n","20190418\n","20190425\n","20190502\n","20190509\n","20190516\n","20190523\n","20190530\n","20190606\n","20190613\n","20190620\n","20190627\n","20190704\n","20190711\n","20190718\n","20190725\n","20190801\n","20190808\n","20190815\n","20190822\n","20190829\n","20190905\n","20190912\n","20190919\n","20190926\n","20191003\n","20191010\n","20191017\n","20191024\n","20191031\n","20191107\n","20191114\n","20191121\n","20191128\n","20191205\n","20191212\n","20191219\n","20191226\n","20200102\n","20200109\n","20200116\n","20200123\n","20200130\n","20200206\n","20200213\n","20200220\n","20200227\n","20200305\n","20200312\n","20200319\n","20200326\n","20200402\n","20200409\n","20200416\n","20200423\n","20200430\n","20200507\n","20200514\n","20200521\n","20200528\n","20200604\n","20200611\n","20200618\n","20200625\n","20200702\n","20200709\n","20200716\n","20200723\n","20200730\n","20200806\n","20200813\n","20200820\n","20200827\n","20200903\n","20200910\n","20200917\n","20200924\n","20201001\n","20201008\n","20201015\n","20201022\n","20201029\n","20201105\n","20201112\n","20201119\n","20201126\n","20201203\n","20201210\n","20201217\n","20201224\n","20201231\n","20210107\n","20210114\n","20210121\n","20210128\n","20210204\n","20210211\n","20210218\n","20210225\n","20210304\n","20210311\n","20210318\n","20210325\n","20210401\n","20210408\n","20210415\n","20210422\n","20210429\n","20210506\n","20210513\n","20210520\n","20210527\n","20210603\n","20210610\n","20210617\n","20210624\n","20210701\n","20210708\n","20210715\n","20210722\n","20210729\n","20210805\n","20210812\n","20210819\n","20210826\n","20210902\n","20210909\n","20210916\n","20210923\n","20210930\n","20211007\n","20211014\n","20211021\n","20211028\n","20211104\n","20211111\n","20211118\n","20211125\n","20211202\n","20211209\n","20211216\n","20211223\n","20211230\n","20220106\n","20220113\n","20220120\n","20220127\n","20220203\n","20220210\n","20220217\n","20220224\n","20220303\n","20220310\n","20220317\n","20220324\n","20220331\n","20220407\n","20220414\n","20220421\n","20220428\n","20220505\n","20220512\n","20220519\n","20220526\n","20220602\n","20220609\n","20220616\n","20220623\n","20220630\n","20220707\n","20220714\n","20220721\n","20220728\n","20220804\n","20220811\n","20220818\n","20220825\n","20220901\n","20220908\n","20220915\n","20220922\n","20220929\n","20221006\n","20221013\n","20221020\n","20221027\n","20221103\n","20221110\n","20221117\n","20221124\n","20221201\n","20221208\n","20221215\n","20221222\n","20221229\n","20230105\n","20230112\n","20230119\n","20230126\n","20230202\n","20230209\n","20230216\n","20230223\n","20230302\n","20230309\n","20230316\n","20230323\n","20230330\n","20230406\n","20230413\n","20230420\n","20230427\n","20230504\n","20230511\n","20230518\n","20230525\n","20230601\n","20230608\n","20230615\n","20230622\n","20230629\n","20230706\n","20230713\n","20230720\n","20230727\n","20230803\n","20230810\n","20230817\n","20230824\n","20230831\n","20230907\n","20230914\n","20230921\n","20230928\n","20231005\n","20231012\n","20231019\n","20231026\n","20231102\n","20231109\n","20231116\n","20231123\n","20231130\n","20231207\n","20231214\n","20231221\n","20231228\n","20240104\n","20240111\n","20240118\n","20240125\n","20240201\n"]}],"source":["\n","#code to find the dates for the url\n","#although give me the last date of the segment week.\n","#so the url needs 9/10 that means it is the week 9/4 - 9/10\n","\n","def get_dates_until_current(start_date):\n","    date_format = \"%Y%m%d\"\n","    current_date = datetime.strptime(start_date, date_format)\n","    current_date_str = datetime.now().strftime(date_format)\n","\n","    dates_list = [current_date_str]\n","\n","    while current_date < datetime.now():\n","        current_date += timedelta(days=7)\n","        if current_date <= datetime.now():\n","            current_date_str = current_date.strftime(date_format)\n","            dates_list.append(current_date_str)\n","\n","    return dates_list\n","\n","# Example: Starting date is 20170921\n","start_date = \"20170921\"\n","dates = get_dates_until_current(start_date)\n","\n","\n","for date in dates[1:] :\n","    print(date)\n"]},{"cell_type":"markdown","source":["Now starting practicing scraping site"],"metadata":{"id":"euDKQK5FLdXd"}},{"cell_type":"code","source":["\n","def fetch_top_songs(end_date, chart_type, country_code=\"us\"):\n","    \"\"\"This is the return the html of the youtubechart\n","        chart types are : VIDEOS, ARTIST, TRACKS\"\"\"\n","\n","    response = requests.get(\"https://charts.youtube.com\")\n","\n","    # Extracting API key using regex\n","    key_regex = re.compile(r\"\\\"INNERTUBE_API_KEY\\\"\\s*:\\s*\\\"(.*?)\\\"\", re.MULTILINE)\n","    api_key_match = key_regex.search(response.text)\n","\n","    if not api_key_match:\n","        print(\"Error: Unable to find API key.\")\n","        return None\n","\n","    api_key = api_key_match.group(1)\n","\n","    post_url = f\"https://charts.youtube.com/youtubei/v1/browse?alt=json&key={api_key}\"\n","\n","    headers = {\n","        \"referer\": \"https://charts.youtube.com\",\n","    }\n","\n","    data = {\n","        \"context\": {\n","            \"client\": {\n","                \"clientName\": \"WEB_MUSIC_ANALYTICS\",\n","                \"clientVersion\": \"0.2\",\n","                \"hl\": \"en\",\n","                \"gl\": \"en\",\n","                \"experimentIds\": [],\n","                \"experimentsToken\": \"\",\n","                \"theme\": \"MUSIC\",\n","            },\n","            \"capabilities\": {},\n","            \"request\": {\n","                \"internalExperimentFlags\": [],\n","            },\n","        },\n","        \"browseId\": \"FEmusic_analytics_charts_home\",\n","        \"query\": f\"perspective=CHART_DETAILS&chart_params_country_code={country_code}&chart_params_chart_type={chart_type}&chart_params_period_type=WEEKLY&chart_params_end_date={end_date}\"\n","    }\n","\n","    response = requests.post(post_url, json=data, headers=headers)\n","    return response\n","\n","\n","\n","\n","#\"VIDEOS\",\"ARTISTS\",\"TRACKS\""],"metadata":{"id":"xvawtYtnhpSf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["response = fetch_top_songs('20231116', \"ARTISTS\")\n","top_artisit_data = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['artists'][0]['artistViews']\n","for  i in top_artisit_data:\n","  print('{},{},{}'.format(i['name'], i['viewCount'], i['chartEntryMetadata']['currentPosition']))"],"metadata":{"id":"HlE4fKHdiLj3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["response = fetch_top_songs('20231116', \"VIDEOS\")\n","top_video_data = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['videos'][0]['videoViews']\n","for  i in top_video_data:\n","  string = \",\".join(n[\"name\"] for n in i['artists'])\n","  print('{},{},{},youtube cahnnel :{}'.format(i['title'], i['viewCount'], i['chartEntryMetadata']['currentPosition'],string ))"],"metadata":{"id":"b_DPLoWLi9Q1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["response = fetch_top_songs('20231116', \"TRACKS\")\n","top_song_data = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['trackTypes'][0]['trackViews']\n","for i in top_song_data:\n","    artist_name = \",\".join(n[\"name\"] for n in i['artists'])\n","    print('{},{},{},{}'.format(i['name'], i['viewCount'], i['chartEntryMetadata']['currentPosition'], artist_name))\n"],"metadata":{"id":"LuzdsfoFLIYP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## scraping the whole website now"],"metadata":{"id":"ZERUouQG09Tg"}},{"cell_type":"markdown","source":["- Notice column ViewCount is the views for the current week\n","- Also weekstart is actauly  the last day of that week so if it 09/12 (day,month) then it for week 9/6 - 9/12"],"metadata":{"id":"wSTXqMhx4uT7"}},{"cell_type":"code","source":["\n","#song scrpaer\n","\n","data_list = []\n","\n","\n","for week_start_date in dates[1:]:\n","    response = fetch_top_songs(week_start_date, \"TRACKS\")\n","    top_song_data = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['trackTypes'][0]['trackViews']\n","\n","    for song in  top_song_data:\n","\n","        try:\n","            # Try to access 'title' key in vid_2 since some videos have been taken down\n","            song_vid_title = song['name']\n","        except KeyError:\n","            # If 'title' key is not present, skip to the next iteration\n","            continue\n","\n","        # Append the aggregated data for the current artist to the main list\n","        data_list.append({\n","            'SongTitle': song_vid_title,\n","            'ViewCount': song['viewCount'],\n","            'CurrentPosition': song['chartEntryMetadata']['currentPosition'],\n","            'WeekStartDate': week_start_date,  # Add the week start date\n","            'YtChannel': \",\".join(n[\"name\"] for n in song['artists'])\n","        })\n","\n","YT_song_rank = pd.DataFrame(data_list)\n","#print(YT_song_rank)\n","#YT_song_rank.to_csv('Youtube_chart_song_ranks.csv',index = False)\n"],"metadata":{"id":"AfJ8-MI0HJ06"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","#music video scraper\n","\n","data_list = []\n","\n","\n","#for week_start_date in dates[1:]:\n","    response = fetch_top_songs(week_start_date, \"VIDEOS\")\n","    top_video_data = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['videos'][0]['videoViews']\n","\n","    for vid_2 in top_video_data:\n","\n","        try:\n","            # Try to access 'title' key in vid_2 since some videos have been taken down\n","            song_vid_title = vid_2['title']\n","        except KeyError:\n","            # If 'title' key is not present, skip to the next iteration\n","            continue\n","\n","        # Append the aggregated data for the current artist to the main list\n","        data_list.append({\n","            'SongVidTitle': song_vid_title,\n","            'ViewCount': vid_2['viewCount'],\n","            'CurrentPosition': vid_2['chartEntryMetadata']['currentPosition'],\n","            'WeekStartDate': week_start_date,  # Add the week start date\n","            'YtChannel': \",\".join(n[\"name\"] for n in vid_2['artists'])\n","        })\n","\n","YT_Music_Vid = pd.DataFrame(data_list)\n","#print(YT_Music_Vid)\n","#YT_Music_Vid.to_csv('Youtube_chart_MusicVid_ranks.csv',index = False)\n"],"metadata":{"id":"5tbQSDqu5GlZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# artist scraper\n","\n","data_list = []\n","\n","#for week_start_date in dates[1:]:\n","    response = fetch_top_songs(week_start_date, \"ARTISTS\")\n","    top_artist_data_week = response.json()[\"contents\"]['sectionListRenderer']['contents'][0]['musicAnalyticsSectionRenderer']['content']['artists'][0]['artistViews']\n","\n","    for artist in top_artist_data_week:\n","        # Append the aggregated data for the current artist to the main list\n","        data_list.append({\n","            'Name': artist['name'],\n","            'ViewCount': artist['viewCount'],\n","            'CurrentPosition': artist['chartEntryMetadata']['currentPosition'],\n","            'WeekStartDate': week_start_date  # Add the week start date\n","        })\n","\n","\n","yt_ranks = pd.DataFrame(data_list)\n","#print(yt_ranks )\n","#yt_ranks.to_csv('Youtube_chart_artist_ranks.csv',index = False)"],"metadata":{"id":"cxanoGaboUIx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhvYU0jHAvD3","executionInfo":{"status":"ok","timestamp":1702417863963,"user_tz":480,"elapsed":194,"user":{"displayName":"Kevin Torres","userId":"02770742881997735716"}},"outputId":"8d08f740-7df1-4049-83e5-437d9eb46158"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'viewCount': '2430426',\n"," 'chartEntryMetadata': {'currentPosition': 49,\n","  'previousPosition': 60,\n","  'percentViewsChange': 0.083359,\n","  'periodsOnChart': 6},\n"," 'isAvailable': False,\n"," 'isVisible': True,\n"," 'shareCardUrl': '/image/analytics/charts?r=CLgIEIAPImQIAhIKCgASABoCNDkqABo-ChdXZWVrbHkgVG9wIE11c2ljIFZpZGVvcxINVW5pdGVkIFN0YXRlcxoSU2VwdGVtYmVyIDI4LCAyMDE3OAMiEgoHIzAwMDAwMBIHI0ZGNTQ1NCgB'}"]},"metadata":{},"execution_count":240}]}]}